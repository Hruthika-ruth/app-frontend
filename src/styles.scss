// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$reg-angular-primary: mat.define-palette(mat.$indigo-palette);
$reg-angular-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$reg-angular-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$reg-angular-theme: mat.define-light-theme(
  (
    color: (
      primary: $reg-angular-primary,
      accent: $reg-angular-accent,
      warn: $reg-angular-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($reg-angular-theme);

/* You can add global styles to this file, and also import other style files */
@tailwind base;
@tailwind components;
@tailwind utilities;
@import url('https://fonts.googleapis.com/css2?family=Overpass:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Milonga&display=swap');

@layer base {
  html {
    font-family: 'Overpass', sans-serif;
  }
}
html,
body {
  height: 100%;
}
body {
  margin: 0;
  @apply bg-slate-200;
  font-family: 'Overpass', sans-serif;
}
label[compulsory]::before {
  content: '';
}
label[compulsory]::after {
  content: '*';
  @apply text-red-500;
}
p.errorText {
  @apply hidden;
}

input.ng-touched.ng-invalid {
  @apply border-red-500;
  & + p.errorText {
    @apply block text-red-500 ml-1 text-[0.85rem];
  }
}
